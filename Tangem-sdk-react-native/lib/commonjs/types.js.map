{"version":3,"sources":["types.ts"],"names":["EllipticCurve","SigningMethod","EncryptionMode","FirmwareType","FileVisibility","Status","LinkedTerminalStatus"],"mappings":";;;;;;;AAAA;AACA;AACA;IACYA,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;IAMAC,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;IAUAC,c;;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c;;IAMAC,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y;;IAMAC,c;;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c;;IAKAC,M;;;WAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,sBAAAA,M;;IAQAC,oB;;;WAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,oCAAAA,oB","sourcesContent":["/**\n * Elliptic curve used for wallet key operations.\n */\nexport enum EllipticCurve {\n  Secp256k1 = 'secp256k1',\n  Ed25519 = 'ed25519',\n  Secp256r1 = 'secp256r1',\n}\n\nexport enum SigningMethod {\n  SignHash = 'SignHash',\n  SignRaw = 'SignRaw',\n  SignHashSignedByIssuer = 'SignHashSignedByIssuer',\n  SignRawSignedByIssuer = 'SignRawSignedByIssuer',\n  SignHashSignedByIssuerAndUpdateIssuerData = 'SignHashSignedByIssuerAndUpdateIssuerData',\n  SignRawSignedByIssuerAndUpdateIssuerData = 'SignRawSignedByIssuerAndUpdateIssuerData',\n  SignPos = 'SignPos',\n}\n\nexport enum EncryptionMode {\n  None = 'none',\n  Fast = 'fast',\n  Strong = 'strong',\n}\n\nexport enum FirmwareType {\n  Sdk = 'd SDK',\n  Release = 'r',\n  Special = 'special',\n}\n\nexport enum FileVisibility {\n  Private = 'private',\n  Public = 'public',\n}\n\nexport enum Status {\n  Failed = 'failed',\n  Warning = 'warning',\n  Skipped = 'skipped',\n  VerifiedOffline = 'verifiedOffline',\n  Verified = 'verified',\n}\n\nexport enum LinkedTerminalStatus {\n  /**\n   * Current app instance is linked to the card\n   */\n  Current = 'current',\n  /**\n   * The other app/device is linked to the card\n   */\n  Other = 'other',\n  /**\n   * No app/device is linked\n   */\n  None = 'none',\n}\n\ntype Data = string;\n\ntype DerivationPath = string;\n\n/**\n * Holds information about card firmware version included version saved on card `version`,\n *  splitted to `major`, `minor` and `hotFix` and `FirmwareType`\n */\nexport interface FirmwareVersion {\n  hotFix: number;\n  major: number;\n  minor: number;\n  type: FirmwareType;\n  version: string;\n}\n\nexport interface WalletSettings {\n  /**\n   * if true, erasing the wallet will be prohibited\n   */\n  isPermanent: Boolean;\n}\n\nexport interface Wallet {\n  /**\n   * Public key of the blockchain wallet.\n   */\n  publicKey: Data;\n  /**\n   * Optional chain code for BIP32 derivation.\n   */\n  chainCode?: Data;\n  /**\n   * Elliptic curve used for all wallet key operations.\n   */\n  curve: EllipticCurve;\n  /**\n   * Wallet's settings\n   */\n  settings: WalletSettings;\n  /**\n   * Total number of signed hashes returned by the wallet since its creation\n   */\n  totalSignedHashes?: Number;\n  /**\n   * Remaining number of `Sign` operations before the wallet will stop signing any data.\n   * - Note: This counter were deprecated for cards with COS 4.0 and higher\n   */\n  remainingSignatures?: Number;\n  /**\n   * Index of the wallet in the card storage\n   */\n  index: Number;\n}\n\nexport interface Manufacturer {\n  /**\n   * Card manufacturer name.\n   */\n  name: string;\n  /**\n   * Timestamp of manufacturing.\n   */\n  manufactureDate: Date;\n  /**\n   * Signature of CardId with manufacturer’s private key. COS 1.21+\n   */\n  signature?: Data;\n}\n\nexport interface Issuer {\n  /**\n   * Name of the issuer.\n   */\n  name: String;\n  /**\n   * Public key that is used by the card issuer to sign IssuerData field.\n   */\n  publicKey: Data;\n}\n\nexport interface Settings {\n  /**\n   * Delay in milliseconds before executing a command that affects any sensitive data or wallets on the card\n   */\n  securityDelay: number;\n  /**\n   * Maximum number of wallets that can be created for this card\n   */\n  maxWalletsCount: number;\n  /**\n   * Is allowed to change access code\n   */\n  isSettingAccessCodeAllowed: boolean;\n  /**\n   * Is  allowed to change passcode\n   */\n  isSettingPasscodeAllowed: boolean;\n  /**\n   * Is allowed to remove access code\n   */\n  isRemovingAccessCodeAllowed: boolean;\n  /**\n   * Is LinkedTerminal feature enabled\n   */\n  isLinkedTerminalEnabled: boolean;\n  /**\n   * All  encryption modes supported by the card\n   */\n  supportedEncryptionModes: [EncryptionMode];\n  /**\n   * Is allowed to delete wallet. COS before v4\n   */\n  isPermanentWallet: boolean;\n  /**\n   * Is overwriting issuer extra data restricted\n   */\n  isOverwritingIssuerExtraDataRestricted: boolean;\n  /**\n   * Card's default signing methods according personalization.\n   */\n  defaultSigningMethods?: SigningMethod;\n  /**\n   * Card's default curve according personalization.\n   */\n  defaultCurve?: EllipticCurve;\n  /**\n   *\n   */\n  isIssuerDataProtectedAgainstReplay: boolean;\n  /**\n   *\n   */\n  isSelectBlockchainAllowed: boolean;\n}\n\nexport interface Attestation {\n  /**\n   * Attestation status of card's public key\n   */\n  cardKeyAttestation: Status;\n  /**\n   * Attestation status of all wallet public key in the card\n   */\n  walletKeysAttestation: Status;\n  /**\n   * Attestation status of card's firmware. Not implemented for this time\n   */\n  firmwareAttestation: Status;\n  /**\n   * Attestation status of card's uniqueness. Not implemented for this time\n   */\n  cardUniquenessAttestation: Status;\n}\n\nexport interface Card {\n  /**\n   * Unique Tangem card ID number.\n   */\n  cardId: string;\n  /**\n   * Tangem internal manufacturing batch ID.\n   */\n  batchId: string;\n  /**\n   * Public key that is used to authenticate the card against manufacturer’s database.\n   * It is generated one time during card manufacturing.\n   */\n  cardPublicKey: Data;\n  /**\n   * Version of Tangem COS.\n   */\n  firmwareVersion: FirmwareVersion;\n  /**\n   * Information about manufacturer\n   */\n  manufacturer: Manufacturer;\n  /**\n   * Information about issuer\n   */\n  issuer: Issuer;\n  /**\n   * Card setting, that were set during the personalization process\n   */\n  settings: Settings;\n  /**\n   * When this value is `current`, it means that the application is linked to the card,\n   * and COS will not enforce security delay if `SignCommand` will be called\n   * with `TlvTag.TerminalTransactionSignature` parameter containing a correct signature of raw data\n   * to be signed made with `TlvTag.TerminalPublicKey`.\n   */\n  linkedTerminalStatus: LinkedTerminalStatus;\n  /**\n   * PIN2 (aka Passcode) is set.\n   * Available only for cards with COS v.4.0 and higher.\n   */\n  isPasscodeSet?: boolean;\n  /**\n   * Array of ellipctic curves, supported by this card. Only wallets with these curves can be created.\n   */\n  supportedCurves: [EllipticCurve];\n  /**\n   * Wallets, created on the card, that can be used for signature\n   */\n  wallets?: Wallet[];\n  /**\n   * Card's attestation report\n   */\n  attestation: Attestation;\n  /**\n   * Any non-zero value indicates that the card experiences some hardware problems.\n   * User should withdraw the value to other blockchain wallet as soon as possible.\n   * Non-zero Health tag will also appear in responses of all other commands.\n   */\n  health?: number;\n  /**\n   * Remaining number of `SignCommand` operations before the wallet will stop signing transactions.\n   * This counter were deprecated for cards with COS 4.0 and higher\n   */\n  remainingSignatures?: number;\n}\n\nexport type NFCStatusResponse = {\n  enabled: boolean;\n  support: boolean;\n};\n\n/**\n * Event's listeners\n */\nexport type Events = 'NFCStateChange';\nexport type EventCallback = {\n  enabled: boolean;\n};\n\n/**\n * Wrapper for a message that can be shown to user after a start of NFC session.\n */\nexport interface Message {\n  /**\n   * Body of message\n   */\n  body?: string;\n  /**\n   * Header of message\n   */\n  header?: string;\n}\n\nexport interface CreateWalletResponse {\n  /**\n   * Unique Tangem card ID number.\n   */\n  cardId: string;\n\n  /**\n   * Created wallet\n   */\n  wallet: Wallet;\n}\n\nexport interface SuccessResponse {\n  /**\n   * Unique Tangem card ID number.\n   */\n  cardId: string;\n}\n\nexport interface SignHashResponse {\n  /**\n   * Unique Tangem card ID number.\n   */\n  cardId: string;\n  /**\n   * Signed hash\n   */\n  signature: Data;\n  /**\n   * Total number of signed  hashes returned by the wallet since its creation. COS: 1.16+\n   */\n  totalSignedHashes?: number;\n}\n\nexport interface SignHashesResponse {\n  /**\n   * Unique Tangem card ID number.\n   */\n  cardId: string;\n  /**\n   * Signed hashes (array of resulting signatures)\n   */\n  signatures: Data[];\n  /**\n   * Total number of signed  hashes returned by the wallet since its creation. COS: 1.16+\n   */\n  totalSignedHashes?: number;\n}\n\nexport interface FileSettings {\n  isPermanent: boolean;\n  visibility: FileVisibility;\n}\n\nexport interface FileSettingsChange {\n  [index: number]: FileVisibility;\n}\n\nexport interface File {\n  data: Data;\n  index: number;\n  settings: FileSettings;\n}\n\nexport interface UserFile {\n  /**\n   * Data to write\n   */\n  data: Data;\n  /**\n   * Optional visibility setting for the file\n   */\n  fileVisibility?: FileVisibility;\n  /**\n   * Optional link to the card's wallet.\n   */\n  walletPublicKey?: Data;\n}\n\nexport interface OwnerFile extends UserFile {\n  /**\n   * Starting signature of the file data\n   */\n  startingSignature?: Data;\n  /**\n   * Finalizing signature of the file data\n   */\n  finalizingSignature?: Data;\n  /**\n   * File name\n   */\n  fileName?: string;\n  /**\n   * File counter to prevent replay attack\n   */\n  counter?: number;\n}\n\nexport type FileToWrite = OwnerFile | UserFile;\n\nexport type ReadFilesResponse = {\n  files: File[];\n};\n\nexport interface WriteFilesResponse {\n  /**\n   * Unique Tangem card ID number.\n   */\n  cardId: string;\n  filesIndices: number[];\n}\n\nexport interface PrepareHashesResponse {\n  startingHash: Data;\n  finalizingHash: Data;\n  startingSignature?: Data;\n  finalizingSignature?: Data;\n}\n\nexport interface TangemSdk {\n  scanCard(initialMessage?: Message): Promise<Card>;\n\n  signHash(\n    hashes: Data,\n    walletPublicKey: Data,\n    cardId: string,\n    hdPath?: DerivationPath,\n    initialMessage?: Message\n  ): Promise<[SignHashResponse]>;\n\n  signHashes(\n    hash: Data[],\n    walletPublicKey: Data,\n    cardId: string,\n    hdPath?: DerivationPath,\n    initialMessage?: Message\n  ): Promise<[SignHashesResponse]>;\n\n  createWallet(\n    curve: EllipticCurve,\n    cardId: string,\n    initialMessage?: Message\n  ): Promise<CreateWalletResponse>;\n\n  purgeWallet(\n    walletPublicKey: Data,\n    cardId: string,\n    initialMessage?: Message\n  ): Promise<SuccessResponse>;\n\n  setAccessCode(\n    accessCode: String,\n    cardId: string,\n    initialMessage?: Message\n  ): Promise<SuccessResponse>;\n\n  setPasscode(\n    passcode: String,\n    cardId: string,\n    initialMessage?: Message\n  ): Promise<SuccessResponse>;\n\n  resetUserCodes(\n    cardId: string,\n    initialMessage?: Message\n  ): Promise<SuccessResponse>;\n\n  readFiles(\n    readPrivateFiles?: boolean,\n    fileName?: string,\n    walletPublicKey?: Data,\n    cardId?: string,\n    initialMessage?: Message\n  ): Promise<ReadFilesResponse>;\n\n  writeFiles(\n    files: FileToWrite[],\n    cardId?: string,\n    initialMessage?: Message\n  ): Promise<WriteFilesResponse>;\n\n  deleteFiles(\n    indices?: number[],\n    cardId?: string,\n    initialMessage?: Message\n  ): Promise<SuccessResponse>;\n\n  changeFilesSettings(\n    changes: FileSettingsChange,\n    cardId?: String,\n    initialMessage?: Message\n  ): Promise<SuccessResponse>;\n\n  prepareHashes(\n    cardId: string,\n    fileData: Data,\n    fileCounter: number,\n    fileName?: string,\n    privateKey?: Data\n  ): Promise<PrepareHashesResponse>;\n\n  runJSONRPCRequest(\n    JSONRPCRequest: object,\n    cardId?: string,\n    initialMessage?: Message\n  ): Promise<any>;\n\n  startSession(): Promise<void>;\n\n  stopSession(): Promise<void>;\n\n  getNFCStatus(): Promise<NFCStatusResponse>;\n\n  on(eventName: Events, handler: (state: EventCallback) => void): void;\n\n  removeListener(\n    eventName: Events,\n    handler: (state: EventCallback) => void\n  ): void;\n}\n"]}