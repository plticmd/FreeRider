{"version":3,"sources":["index.ts"],"names":["DeviceEventEmitter","NativeModules","Platform","RNTangemSdk","getJsonRequest","method","params","jsonrpc","id","convertRequest","Object","keys","forEach","key","JSON","stringify","execCommand","cardId","initialMessage","execJsonRPCRequest","jsonRequest","request","JSONRPCRequest","Promise","resolve","reject","response","runJSONRPCRequest","parseResponse","parse","error","Error","result","e","tangemSdk","scanCard","undefined","signHash","hash","walletPublicKey","hdPath","signHashes","hashes","createWallet","curve","purgeWallet","setAccessCode","accessCode","setPasscode","passcode","resetUserCodes","readFiles","readPrivateFiles","fileName","writeFiles","files","deleteFiles","indices","changeFilesSettings","changes","prepareHashes","fileData","fileCounter","privateKey","startSession","stopSession","getNFCStatus","on","eventName","handler","OS","addListener","removeListener"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { DeviceEventEmitter, NativeModules, Platform } from 'react-native';\n\nimport type { Message, TangemSdk } from './types';\n\nconst { RNTangemSdk } = NativeModules;\n\nfunction getJsonRequest(method: SdkMethod = 'scan', params = {}) {\n  return { jsonrpc: '2.0', id: '1', method, params };\n}\n\nfunction convertRequest(params: { [k: string]: any }): Object {\n  Object.keys(params).forEach(function (key) {\n    if (typeof params[key] === 'undefined') {\n      delete params[key];\n    }\n    if (typeof params[key] === 'object') {\n      params[key] = JSON.stringify(params[key]);\n    }\n  });\n  return params;\n}\n\nfunction execCommand(\n  method: SdkMethod = 'scan',\n  params = {},\n  cardId?: String,\n  initialMessage?: Message\n): Promise<any> {\n  return execJsonRPCRequest(\n    getJsonRequest(method, params),\n    cardId,\n    initialMessage\n  );\n}\n\nasync function execJsonRPCRequest(\n  jsonRequest = {},\n  cardId?: String,\n  initialMessage?: Message\n): Promise<any> {\n  const request = {\n    JSONRPCRequest: JSON.stringify(jsonRequest),\n    cardId,\n    initialMessage: JSON.stringify(initialMessage),\n  };\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await RNTangemSdk.runJSONRPCRequest(request);\n      const parseResponse =\n        typeof response === 'object' ? response : JSON.parse(response);\n      if (parseResponse.error) {\n        reject(new Error(JSON.stringify(parseResponse.error, null, '\\t')));\n      }\n      resolve(parseResponse.result);\n    } catch (e) {\n      reject(new Error('Could not complete the request'));\n    }\n  });\n}\n\ntype SdkMethod =\n  | 'scan'\n  | 'sign_hash'\n  | 'sign_hashes'\n  | 'create_wallet'\n  | 'purge_wallet'\n  | 'set_accesscode'\n  | 'set_passcode'\n  | 'reset_usercodes'\n  | 'preflight_read'\n  | 'change_file_settings'\n  | 'delete_files'\n  | 'read_files'\n  | 'write_files';\n\nconst tangemSdk: TangemSdk = {\n  /**\n   * To start using any card, you first need to read it using the `scanCard()` method.\n   * This method launches an NFC session, and once itâ€™s connected with the card,\n   * it obtains the card data. optionally, if the card contains a wallet (private and public key pair),\n   * it proves that the wallet owns a private key that corresponds to a public one.\n   * @param {Message} initialMessage A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<Card>} response\n   */\n  scanCard: (initialMessage: Message) =>\n    execCommand('scan', {}, undefined, initialMessage),\n\n  /**\n   * This method allows you to sign one hash.\n   * Please note that Tangem cards usually protect the signing with a security delay\n   * that may last up to 45 seconds, depending on a card.\n   * It is for `SessionViewDelegate` to notify users of security delay.\n   * Note: Wallet index works only on COS v.4.0 and higher. For previous version index will be ignored\n   * @param {Data} hash Array of transaction hashes. It can be from one or up to ten hashes of the same length.\n   * @param {Data} walletPublicKey Public key of wallet that should sign hashes.\n   * @param {string} cardId Unique Tangem card ID number.\n   * @param {string} [hdPath] Derivation path of the wallet. Optional. COS v. 4.28 and higher\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SignHashResponse>} response\n   */\n  signHash: (hash, walletPublicKey, cardId, hdPath, initialMessage) =>\n    execCommand(\n      'sign_hash',\n      {\n        walletPublicKey,\n        hdPath,\n        hash,\n      },\n      cardId,\n      initialMessage\n    ),\n\n  /**\n   * This method allows you to sign one or multiple hashes.\n   * Simultaneous signing of array of hashes in a single `SignCommand` is required to support\n   * Bitcoin-type multi-input blockchains (UTXO).\n   * The `SignCommand` will return a corresponding array of signatures.\n   * Please note that Tangem cards usually protect the signing with a security delay\n   * that may last up to 45 seconds, depending on a card.\n   * It is for `SessionViewDelegate` to notify users of security delay.\n   * Note: Wallet index works only on COS v.4.0 and higher. For previous version index will be ignored\n   * @param {Data[]} hashes Array of transaction hashes. It can be from one or up to ten hashes of the same length.\n   * @param {Data} walletPublicKey Public key of wallet that should sign hashes.\n   * @param {string} cardId Unique Tangem card ID number.\n   * @param {string} [hdPath] Derivation path of the wallet. Optional. COS v. 4.28 and higher\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SignHashResponse>} response\n   */\n  signHashes: (hashes, walletPublicKey, cardId, hdPath, initialMessage) =>\n    execCommand(\n      'sign_hashes',\n      {\n        walletPublicKey,\n        hdPath,\n        hashes,\n      },\n      cardId,\n      initialMessage\n    ),\n\n  /**\n   * This command will create a new wallet on the card having â€˜Emptyâ€™ state.\n   * A key pair WalletPublicKey / WalletPrivateKey is generated and securely stored in the card.\n   * App will need to obtain Wallet_PublicKey from the response of `CreateWalletCommand` or `ReadCommand`\n   * and then transform it into an address of corresponding blockchain wallet\n   * according to a specific blockchain algorithm.\n   * WalletPrivateKey is never revealed by the card and will be used by `SignCommand` and `CheckWalletCommand`.\n   * RemainingSignature is set to MaxSignatures.\n   * @param {EllipticCurve} curve Wallet's elliptic curve\n   * @param {string} [cardId] Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<CreateWalletResponse>}\n   */\n  createWallet: (curve, cardId, initialMessage) =>\n    execCommand('create_wallet', { curve }, cardId, initialMessage),\n\n  /**\n   * This command deletes all wallet data. If Is_Reusable flag is enabled during personalization,\n   * the card changes state to â€˜Emptyâ€™ and a new wallet can be created by `CREATE_WALLET` command.\n   * If Is_Reusable flag is disabled, the card switches to â€˜Purgedâ€™ state.\n   * â€˜Purgedâ€™ state is final, it makes the card useless.\n   * - Note: Wallet index available for cards with COS v.4.0 or higher\n   * @param {Data} walletPublicKey Public key of wallet that should be purged.\n   * @param {string} cardId Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SuccessResponse>}\n   */\n  purgeWallet: (walletPublicKey, cardId, initialMessage) =>\n    execCommand('purge_wallet', { walletPublicKey }, cardId, initialMessage),\n\n  /**\n   * Set or change card's access code\n   * @param {string} accessCode Access code to set. If nil, the user will be prompted to enter code before operation\n   * @param {string} cardId Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SuccessResponse>}\n   */\n  setAccessCode: (accessCode, cardId, initialMessage) =>\n    execCommand('set_accesscode', { accessCode }, cardId, initialMessage),\n\n  /**\n   * Set or change card's passcode\n   * @param {string} passcode: Passcode to set. If nil, the user will be prompted to enter code before operation\n   * @param {string} cardId Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SuccessResponse>}\n   */\n  setPasscode: (passcode, cardId, initialMessage) =>\n    execCommand('set_passcode', { passcode }, cardId, initialMessage),\n\n  /**\n   * Reset all user codes\n   * @param cardId\n   * @param initialMessage\n   */\n  resetUserCodes: (cardId, initialMessage) =>\n    execCommand('reset_usercodes', {}, cardId, initialMessage),\n\n  /**\n   * This command reads all files stored on card.\n   * By default command trying to read all files (including private), to change this behaviour - setup your ` ReadFileDataTaskSetting `\n   * - Note: When performing reading private files command, you must provide `pin2`\n   * - Warning: Command available only for cards with COS 3.29 and higher\n   *\n   * @param {boolean} [readPrivateFiles] If true - all files saved on card will be read otherwise\n   * @param {string} [fileName] File name\n   * @param {Data} [walletPublicKey] Public key of wallet that should sign hashes.\n   * @param {string} [cardId] Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<ReadFilesResponse>}\n   */\n  readFiles: (\n    readPrivateFiles,\n    fileName,\n    walletPublicKey,\n    cardId,\n    initialMessage\n  ) =>\n    execCommand(\n      'read_files',\n      { readPrivateFiles, fileName, walletPublicKey },\n      cardId,\n      initialMessage\n    ),\n\n  /**\n   * This command write all files provided in `files` to card.\n   *\n   * Warning: This command available for COS 3.29 and higher\n   * Note: Writing files protected by Pin2 only available for COS 3.34 and higher\n   * @param {FileToWrite[]} files List of files that should be written to card\n   * @param {string} [cardId] Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<WriteFilesResponse>}\n   */\n  writeFiles: (files, cardId, initialMessage) =>\n    execCommand('write_files', { files }, cardId, initialMessage),\n\n  /**\n   * This command deletes selected files from card. This operation can't be undone.\n   *\n   * To perform file deletion you should initially read all files (`readFiles` command) and add them to `indices` array. When files deleted from card, other files change their indexes.\n   * After deleting files you should additionally perform `readFiles` command to actualize files indexes\n   * Warning: This command available for COS 3.29 and higher\n   * @param {number[]} [indices] Indexes of files that should be deleted. If nil - deletes all files from card\n   * @param {string} [cardId] Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SuccessResponse>}\n   */\n  deleteFiles: (indices, cardId, initialMessage) =>\n    execCommand('delete_files', { indices }, cardId, initialMessage),\n\n  /**\n   * Updates selected file settings provided within `File`.\n   *\n   * To perform file settings update you should initially read all files (`readFiles` command), select files that you\n   * want to update, change their settings in `File.fileSettings` and add them to `files` array.\n   * Note: In COS 3.29 and higher only file visibility option (public or private) available to update\n   * Warning: This method works with COS 3.29 and higher\n   * @param {FileSettingsChange} changes Array of file indices with new settings\n   * @param {string} [cardId] Unique Tangem card ID number.\n   * @param {Message} [initialMessage] A custom description that shows at the beginning of the NFC session. If nil, default message will be used\n   *\n   * @returns {Promise<SuccessResponse>}\n   */\n  changeFilesSettings: (changes, cardId, initialMessage) =>\n    execCommand('change_file_settings', { changes }, cardId, initialMessage),\n\n  /**\n   * @param {string} cardId Unique Tangem card ID number.\n   * @param {Data} fileData Data of file that will be saved on card\n   * @param {number} fileCounter A counter that protect issuer data against replay attack.\n   * @param {string} [fileName] File name\n   * @param {Data} [privateKey] Optional private key that will be used for signing files hashes. If provided - resulting `FileHashData` will have signed file signatures\n   *\n   * @returns {Promise<PrepareHashesResponse>}\n   */\n  prepareHashes: (cardId, fileData, fileCounter, fileName, privateKey) =>\n    RNTangemSdk.prepareHashes(\n      convertRequest({\n        cardId,\n        fileData,\n        fileCounter,\n        fileName,\n        privateKey,\n      })\n    ),\n\n  runJSONRPCRequest: (JSONRPCRequest, cardId, initialMessage) =>\n    execJsonRPCRequest(JSONRPCRequest, cardId, initialMessage),\n\n  startSession: () => RNTangemSdk.startSession(),\n  stopSession: () => RNTangemSdk.stopSession(),\n  getNFCStatus: () => RNTangemSdk.getNFCStatus(),\n\n  /**\n   * Listen for available events (Android)\n   * @param  {String} eventName Name of event NFCStateChange\n   * @param  {Function} handler Event handler\n   */\n  on: (eventName, handler) => {\n    if (Platform.OS === 'android') {\n      DeviceEventEmitter.addListener(eventName, handler);\n    }\n  },\n\n  /**\n   * Stop listening for event (Android)\n   * @param  {String} eventName Name of event NFCStateChange\n   * @param  {Function} handler Event handler\n   */\n  removeListener: (eventName, handler) => {\n    if (Platform.OS === 'android') {\n      DeviceEventEmitter.removeListener(eventName, handler);\n    }\n  },\n};\n\n// export all types\nexport * from './types';\n\n// export module\nexport default tangemSdk;\n"]}