// Generated by view binder compiler. Do not edit!
package com.example.platform.ui.windowmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.platform.ui.windowmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySplitActivityListLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button infoButton;

  @NonNull
  public final Button listItem1;

  @NonNull
  public final Button listItem2;

  @NonNull
  public final Button listItem3;

  @NonNull
  public final Button listItem4;

  @NonNull
  public final Button listItem5;

  @NonNull
  public final RelativeLayout rootSplitActivityLayout;

  private ActivitySplitActivityListLayoutBinding(@NonNull RelativeLayout rootView,
      @NonNull Button infoButton, @NonNull Button listItem1, @NonNull Button listItem2,
      @NonNull Button listItem3, @NonNull Button listItem4, @NonNull Button listItem5,
      @NonNull RelativeLayout rootSplitActivityLayout) {
    this.rootView = rootView;
    this.infoButton = infoButton;
    this.listItem1 = listItem1;
    this.listItem2 = listItem2;
    this.listItem3 = listItem3;
    this.listItem4 = listItem4;
    this.listItem5 = listItem5;
    this.rootSplitActivityLayout = rootSplitActivityLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySplitActivityListLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySplitActivityListLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_split_activity_list_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySplitActivityListLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.infoButton;
      Button infoButton = ViewBindings.findChildViewById(rootView, id);
      if (infoButton == null) {
        break missingId;
      }

      id = R.id.list_item_1;
      Button listItem1 = ViewBindings.findChildViewById(rootView, id);
      if (listItem1 == null) {
        break missingId;
      }

      id = R.id.list_item_2;
      Button listItem2 = ViewBindings.findChildViewById(rootView, id);
      if (listItem2 == null) {
        break missingId;
      }

      id = R.id.list_item_3;
      Button listItem3 = ViewBindings.findChildViewById(rootView, id);
      if (listItem3 == null) {
        break missingId;
      }

      id = R.id.list_item_4;
      Button listItem4 = ViewBindings.findChildViewById(rootView, id);
      if (listItem4 == null) {
        break missingId;
      }

      id = R.id.list_item_5;
      Button listItem5 = ViewBindings.findChildViewById(rootView, id);
      if (listItem5 == null) {
        break missingId;
      }

      RelativeLayout rootSplitActivityLayout = (RelativeLayout) rootView;

      return new ActivitySplitActivityListLayoutBinding((RelativeLayout) rootView, infoButton,
          listItem1, listItem2, listItem3, listItem4, listItem5, rootSplitActivityLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
