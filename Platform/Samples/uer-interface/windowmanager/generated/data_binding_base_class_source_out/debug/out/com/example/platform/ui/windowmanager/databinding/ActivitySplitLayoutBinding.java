// Generated by view binder compiler. Do not edit!
package com.example.platform.ui.windowmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.platform.ui.windowmanager.R;
import com.example.platform.ui.windowmanager.SplitLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySplitLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SplitLayoutControlBinding endLayout;

  @NonNull
  public final LinearLayout rootLayout;

  @NonNull
  public final SplitLayout splitLayout;

  @NonNull
  public final SplitLayoutContentBinding startLayout;

  private ActivitySplitLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull SplitLayoutControlBinding endLayout, @NonNull LinearLayout rootLayout,
      @NonNull SplitLayout splitLayout, @NonNull SplitLayoutContentBinding startLayout) {
    this.rootView = rootView;
    this.endLayout = endLayout;
    this.rootLayout = rootLayout;
    this.splitLayout = splitLayout;
    this.startLayout = startLayout;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySplitLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySplitLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_split_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySplitLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.end_layout;
      View endLayout = ViewBindings.findChildViewById(rootView, id);
      if (endLayout == null) {
        break missingId;
      }
      SplitLayoutControlBinding binding_endLayout = SplitLayoutControlBinding.bind(endLayout);

      LinearLayout rootLayout = (LinearLayout) rootView;

      id = R.id.split_layout;
      SplitLayout splitLayout = ViewBindings.findChildViewById(rootView, id);
      if (splitLayout == null) {
        break missingId;
      }

      id = R.id.start_layout;
      View startLayout = ViewBindings.findChildViewById(rootView, id);
      if (startLayout == null) {
        break missingId;
      }
      SplitLayoutContentBinding binding_startLayout = SplitLayoutContentBinding.bind(startLayout);

      return new ActivitySplitLayoutBinding((LinearLayout) rootView, binding_endLayout, rootLayout,
          splitLayout, binding_startLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
